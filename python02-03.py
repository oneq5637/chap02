# -*- coding: utf-8 -*-

#자바에서의 배열 선언
# int[] array = new int[5];
# string[] strArray = {"배열1", "배열2", "배열3"}

#파이썬에서 리스트 선언
#파이썬에서 리스트는 자바에서 배열과 같은 기능을 함
#자바에서는 배열에 자료형을 입력하기 때문에 같은 자료형의 데이터만 입력할 수 있으나 파이썬에서는 자료형을 입력하지 않기 때문에 어떠한 자료형도 하나의 리스트에 입력이 가능함

print("리스트 사용하기")
a = []
b = [1, 2, 3]
c = ["Life", "is", "too", "short"]
d = [1, 2, "Life", "is"]
e = [1, 2, ["List", "is"]]

print("빈 리스트 : {0}".format(a))
print("숫자형 리스트 : {0}".format(b))
print("문자열형 리스트 : {0}".format(c))
print("숫자와 문자열 혼합형 리스트 : {0}".format(d))
print("숫자와 리스트 타입 혼합형 리스트 : {0}".format(e))
#빈 리스트 : []
#숫자형 리스트 : [1, 2, 3]
#문자열형 리스트 : ['Life', 'is', 'too', 'short']
#숫자와 문자열 혼합형 리스트 : [1, 2, 'Life', 'is']
#숫자와 리스트 타입 혼합형 리스트 : [1, 2, ['List', 'is']]

#자바의 배열과 같이 인덱싱이 가능함
#index 번호는 0번부터 시작 (list[index])
#리스트의 사용방법은 자바의 배열 사용방법과 기본적으로 같음
#값 출력 : a[index]
#값 입력 : a[index] = value = 입력할 값
#리스트의 마지막 요소 출력 : a[-1]
#리스트의 크기 구하기 : len(리스트명)

a = [1, 2, 3]
print("리스트 a의 index 1번 출력 : {0}".format(a[1]))
print("리스트를 사용하여 연산하기 : {0}".format(a[0] + a[2]))
#리스트 a의 index 1번 출력 : 2
#리스트를 사용하여 연산하기 : 4

print("리스트의 마지막 요소 출력 : {0}".format(a[-1]))
#리스트의 마지막 요소 출력 : 3
print("리스트의 마지막 요소 출력 : {0}".format(a[len(a) -1]))
#리스트의 마지막 요소 출력 : 3

print("리스트의 길이 출력하기 : {0}".format(len(a)))
#리스트의 길이 출력하기 : 3

print()

#리스트 안의 리스트 사용하기
#리스트 안에 리스트를 입력하면 하나의 리스트 요소로 리스트를 가질 수 있음
#리스트 안의 리스트의 요소에 접근하려면 자바의 2차원 배열을 사용하는 것처럼 접근가능
#출력 : a[첫번째 리스트 index [두번째 리스트 index]]
#입력 : a[첫번째 리스트 index [두번째 리스트 index]] = 값 
a = [1,2,3,['a','b','c']]

print("배열 a의 2번째 요소 출력 : {0}".format(a[2]))
print("배열 a의 3번째 요소 출력 : {0}".format(a[3]))
print("배열 a의 3번째 요소의 1번째 요소 출력 : {0}".format(a[3][1]))
#배열 a의 2번째 요소 출력 : 3
#배열 a의 3번째 요소 출력 : ['a', 'b', 'c']
#배열 a의 3번째 요소의 1번째 요소 출력 : b

#리스트 슬라이싱
#문자열 슬라이싱
#서로 동일함
a = [1,2,3,4,5]
b = "12345"

print("리스트 슬라이싱 하기 : {0}" .format(a[0:2]))
#리스트 슬라이싱 하기 : [1, 2]

print("문자열 슬라이싱 하기 : {0}" .format(b[0:2]))
#문자열 슬라이싱 하기 : 12

print()

print("리스트의 처음부터 지정한 위치까지 출력 : {0}" .format(a[:2]))
print("리스트의 처음부터 지정한 위치까지 출력 : {0}" .format(a[2:]))
#리스트의 처음부터 지정한 위치까지 출력 : [1, 2]
#리스트의 처음부터 지정한 위치까지 출력 : [3, 4, 5]


a = [1,2,3,['a','b','c'],4,5]

#리스트 a의 2번째 요소의 값 3을 출력하고 3번째 요소인 리스트 전체를 출력, 끝나는 요소가 리스트 a의 5번째 요소 앞의 요소 값 4를 출력
print("중첩된 리스트 출력 : {0}".format(a[2:5]))
#중첩된 리스트 출력 : [3, ['a', 'b', 'c'], 4]

#리스트 a의 3번째 요소인 리스트의 처음부터 2번째 요소 앞까지 출력
print("중첩된 리스트 출력 : {0}".format(a[3][:2]))
#중첩된 리스트 출력 : ['a', 'b']

#리스트 연산자
#기존 리스트에 다른 리스트를 연산하여 하나의 리스트로 만듬
#+연산자 : 기존의 리스트에 추가함
#*연산자 : 기존의 리스트르르 곱하여 추가함
a = [1,2,3]
b = [4,5,6]
print("+연산자를 사용하여 2개의 리스트트 합함 : {0}" .format(a+b))
#+연산자를 사용하여 2개의 리스트트 합함 : [1, 2, 3, 4, 5, 6]

a = [1,2,3]
print("*연산자를 사용하여 a리스트를 {0}번 반복한 리스트 생성 : {1}" .format(3, a*3))
#*연산자를 사용하여 a리스트를 3번 반복한 리스트 생성 : [1, 2, 3, 1, 2, 3, 1, 2, 3]

print()

#리스트의 수정,변경과 삭제
a = [1,2,3]
b = [1,2,3]
print("원본 a의 리스트 출력 : {0}" .format(a))
print("원본 b의 리스트 출력 : {0}" .format(b))
#원본 a의 리스트 출력 : [1, 2, 3]
#원본 b의 리스트 출력 : [1, 2, 3]
a[2] = 4
print("수정한 a의 리스트 출력 : {0}" .format(a))
#수정한 a의 리스트 출력 : [1, 2, 4]


print()

#연속된 범위 수정
#리스트의 값을 입력할 경우 값은 하나의 인덱스를 선택하더라도 a[1:2]와 a[1]은 다름
#a[1:2]의 경우는 범위 설정을 통하여 하나의 인덱스값만 출력한 형태이나, a[1]은 하나의 인덱스만을 선택한 형태임
print("리스트 a의 1:2값 출력 : {0}".format(a[1:2]))
#리스트 a의 1:2값 출력 : [2]

a[1:2] = ["a","b","c"]
print("리스트 a의 범위 수정 : {0}" .format(a))
#리스트 a의 범위 수정 : [1, 'a', 'b', 'c', 4]

b[1] = ["a","b","c"]
print("리스트 b의 index 1에 리스트 넣기 : {0}" .format(b))
#리스트 b의 index 1에 리스트 넣기 : [1, ['a', 'b', 'c'], 3]


print()
#리스트 요소 삭제
#리스트의 요소에 빈 리스트를 입력하면 해당 리스트의 인덱스가 삭제 됨
print("삭제 전 리스트 출력 : {0}" .format(a))
a[1:3] = []
print("삭제 후 리스트 출력 : {0}" .format(a))
#삭제 전 리스트 출력 : [1, 'a', 'b', 'c', 4]
#삭제 후 리스트 출력 : [1, 'c', 4]
a[1:2] = []
print("요소 하나만 삭제 : {0}" .format(a))
#요소 하나만 삭제 : [1, 4]

#del() 함수를 사용하여 리스트 요소 삭제
#del(삭제할 리스트 요소)
print("삭제 전 리스트 출력 : {0}" .format(a))
del a[1]
print("삭제 후 리스트 출력 : {0}" .format(a))
#삭제 전 리스트 출력 : [1, 4]
#삭제 후 리스트 출력 : [1]


print()
#배열과 리스트의 차이점
# 배열은 선언시 크기가 지정된다. 사용이 쉽지만 유연하지 못함.(칸을 나눈 6칸 생각, 처음 칸이 지정되고 이 값이 변경되지 않음)
# 리스트의 특성은 동적크기설정으로, 그로 인해 유연한 이용이 가능하다. (처음 칸 수가 지정되지 않고 인덱스 값을 추가하거나 빼면 마음대로 이용이 가능함)

#리스트 관련 함수
#입력 함수 insert, append

#insert()는 입력하려는 위치의 index번호에 지정한 값을 입력함
#insert() 함수는 index() 함수와 같이 사용하는 형태가 많음
a = [1,2,3]
print("원본 리스트 : {0}" .format(a))
a.insert(1, 100)
print("insert를 이용하여 값 추가 : {0}" .format(a))
#원본 리스트 : [1, 2, 3]
#insert를 이용하여 값 추가 : [1, 100, 2, 3]

#append()는 리스트의 가장 마지막 요소 뒤에 지정한 값을 추가함
a = [1,2,3]
print("원본 리스트 : {0}" .format(a))
a.append(100)
print("append를 이용하면 값 추가 : {0}". format(a))
#원본 리스트 : [1, 2, 3]
#append를 이용하면 값 추가 : [1, 2, 3, 100]


print()
#제거 함수 remove, pop

#remove()함수는 지정한 값을 리스트에서 첫번째로 검색되는 지정된 값을 삭제
a = [1,2,3,1,2,3]
print("원본 리스트 : {0}" .format(a))
a.remove(3)
print("remove를 이용하여 해당하는 값 삭제 : {0}" .format(a))
#원본 리스트 : [1, 2, 3, 1, 2, 3]
#remove를 이용하여 해당하는 값 삭제 : [1, 2, 1, 2, 3]

#pop() 함수는 해당하는 인덱스의 값을 반환하고 리스트에서 삭제
a = [1,2,3,1,2,3]
print("원본 리스트 : {0}" .format(a))
print("pop을 이용하여 해당하는 index의 값 삭제 : {0}" .format(a.pop(1)))
print("pop을 이용하여 해당하는 index의 값을 삭제 후  리스트 출력 : {0}" .format(a))
#원본 리스트 : [1, 2, 3, 1, 2, 3]
#pop을 이용하여 해당하는 index의 값 삭제 : 2
#pop을 이용하여 해당하는 index의 값을 삭제 후 리스트 출력 : [1, 3, 1, 2, 3]


print()
#리스트 정렬 sort, reverse 
#sort()함수는 리스트 내부의 값을 오름차순으로 정렬하여 리스트에 출력함
a = [1,4,3,2]
print("원본 리스트 : {0}".format(a))
a.sort()
print("sort를 사용하여 정렬된 리스트 : {0}" .format(a))
#원본 리스트 : [1, 4, 3, 2]
#sort를 사용하여 정렬된 리스트 : [1, 2, 3, 4]


#reverse() 함수는 정렬은 하지 않고 리스트 내부의 값의 순서만 뒤바꿈
a = [1,4,3,2]
print("원본 리스트 : {0}".format(a))
a.reverse()
print("reverse를 사용하여 정렬된 리스트 : {0}" .format(a))
#원본 리스트 : [1, 4, 3, 2]
#reverse를 사용하여 정렬된 리스트 : [2, 3, 4, 1]


#내림차순을 정렬하려면 sort()함수를 먼저 사용하고 reverse() 함수를 사용하여 순서를 뒤바꿈
a = [1,4,3,2]
print("원본 리스트 : {0}" .format(a))
a.sort()
a.reverse()
print("순서가 뒤집어진 리스트 : {0}" .format(a))
#원본 리스트 : [1, 4, 3, 2]
#순서가 뒤집어진 리스트 : [4, 3, 2, 1]

# 위치 찾기 index
a = [1,2,3]
print("index함수를 이용하여 리스트의 값 찾기 : {0}" .format(a.index(3)))
#index함수를 이용하여 리스트의 값 찾기 : 2

#리스트에 포함된 지정한 값의 수 확인 count
a = [1,4,3,2,4,5]
print("리스트 a에 포함된 3의 총 개수 확인 : {0}" .format(a.count(3)))
#리스트 a에 포함된 3의 총 개수 확인 : 1

#리스트 확장 extend
#append를 사용해도 되고 리스트 연산자 중 +를 사용해도 같은 효과
#extend() 에는 리스트만 입력할 수 있음
a = [1,2,3]
print("원본 리스트 : {0}" .format(a))
a.extend([4,5,6])
print("extend로 확장된 리스트 : {0}" .format(a))
#원본 리스트 : [1, 2, 3]
#extend로 확장된 리스트 : [1, 2, 3, 4, 5, 6]
a = a + [7,8,9]
print("+연산자로 리스트를 추가한 리스트 : {0}" .format(a))
#+연산자로 리스트를 추가한 리스트 : [1, 2, 3, 4, 5, 6, 7, 8, 9]


